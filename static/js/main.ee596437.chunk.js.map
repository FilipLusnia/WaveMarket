{"version":3,"sources":["components/App.js","components/TrackInfo.js","components/TrackSquare.js","components/Searchbar.js","serviceWorker.js","index.js"],"names":["App","props","reciveAuthToken","request","require","authOptions","url","headers","Buffer","client_id","client_secret","toString","form","grant_type","json","post","error","response","body","statusCode","token","access_token","setState","authToken","getId","id","currId","removeId","state","this","className","React","Component","TrackInfo","useState","trackInfo","setTrackInfo","trackThumb","setTrackThumb","isClosed","setIsClosed","useEffect","fetch","then","data","handleClose","e","preventDefault","onClick","src","album","images","alt","height","width","name","artists","href","target","rel","duration_ms","toFixed","tempo","key","mode","loudness","style","energy","danceability","valence","instrumentalness","acousticness","Track","title","artist","cover","Searchbar","songName","setSongName","results","setResults","resAmount","setResAmount","moreResults","setMoreResults","fetchData","status","undefined","catch","err","console","log","handleLoadButton","type","onChange","value","placeholder","tracks","items","length","map","item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2OAKqBA,E,kDAEnB,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAeRC,gBAAkB,WAChB,IAAMC,EAAUC,EAAQ,KAElBC,EAAc,CAClBC,IAAK,yCACLC,QAAS,CACP,cAAiB,SAAY,IAAIC,EAAO,EAAKC,UAAY,IAAM,EAAKC,eAAeC,SAAS,WAE9FC,KAAM,CACJC,WAAY,sBAEdC,MAAM,GAGRX,EAAQY,KAAKV,GAAa,SAACW,EAAOC,EAAUC,GAE1C,IAAKF,GAAiC,MAAxBC,EAASE,WAAoB,CACzC,IAAMC,EAAQF,EAAKG,aACnB,EAAKC,SAAS,CAACC,UAAWH,SAlCd,EAuClBI,MAAQ,SAACC,GACP,EAAKH,SAAS,CAACI,OAAQD,KAxCP,EA2ClBE,SAAW,WACT,EAAKL,SAAS,CAACI,OAAQ,QAzCvB,EAAKE,MAAQ,CACXL,UAAW,KACXG,OAAQ,MAGV,EAAKjB,UAAY,mCACjB,EAAKC,cAAgB,mCATL,E,gEAahBmB,KAAK3B,oB,+BAmCL,OACE,yBAAK4B,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,CACErB,UAAaoB,KAAKpB,UAClBC,cAAiBmB,KAAKnB,cACtBgB,OAAUG,KAAKD,MAAMF,OACrBH,UAAaM,KAAKD,MAAML,UACxBI,SAAYE,KAAKF,YAGrB,kBAAC,IAAD,CACElB,UAAaoB,KAAKpB,UAClBC,cAAiBmB,KAAKnB,cACtBc,MAASK,KAAKL,MACdD,UAAaM,KAAKD,MAAML,iB,GAjEDQ,IAAMC,a,6HCFxB,SAASC,EAAT,GAAkD,IAA9BP,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,SAAUJ,EAAW,EAAXA,UAAW,EAE1BW,oBAAS,GAFiB,mBAErDC,EAFqD,KAE1CC,EAF0C,OAGxBF,oBAAS,GAHe,mBAGrDG,EAHqD,KAGzCC,EAHyC,OAI5BJ,oBAAS,GAJmB,mBAIrDK,EAJqD,KAI3CC,EAJ2C,KAM5DC,qBAAU,WACQ,OAAXf,GACCgB,MAAK,oDAA+ChB,GAAS,CACzDnB,QAAQ,CACJ,cAAiB,UAAYgB,KAGpCoB,MAAK,SAAA1B,GACF,OAAOA,EAASH,UAEnB6B,MAAK,SAAAC,GACFR,EAAaQ,MAEhBD,KAAKH,GAAY,MAEvB,CAACd,EAAQH,IAEZkB,qBAAU,WACQ,OAAXf,GACCgB,MAAK,4CAAuChB,GAAS,CACjDnB,QAAS,CACL,cAAiB,UAAYgB,KAGpCoB,MAAK,SAAA1B,GACF,OAAOA,EAASH,UAEnB6B,MAAK,SAAAC,GACFN,EAAcM,QAGvB,CAAClB,EAAQH,IAEZ,IAAMsB,EAAc,SAACC,GACjBA,EAAEC,iBACEZ,IACAK,GAAY,GACZJ,GAAa,GACbE,GAAc,GACdX,MAIR,OACI,qCACmB,IAAdQ,IAAoC,IAAbI,IAAqC,IAAfF,EAE1C,oCACI,yBAAKP,UAAU,uBAAuBkB,QAASH,IAE/C,yBAAKf,UAAU,uBACX,4BAAQA,UAAU,sBAAsBkB,QAASH,GAAjD,WACA,yBAAKf,UAAU,4BAEX,yBAAKA,UAAU,uBACX,yBAAKmB,IAAKZ,EAAWa,MAAMC,OAAO,GAAG7C,IAAK8C,IAAI,QAAQC,OAAO,MAAMC,MAAM,MAAMxB,UAAU,4BACzF,yBAAKA,UAAU,6BAA6BO,EAAWkB,MACvD,yBAAKzB,UAAU,8BAA8BO,EAAWmB,QAAQ,GAAGD,MACnE,uBAAGzB,UAAU,iBACb2B,KAAI,yCAAoCtB,EAAUV,IAClDiC,OAAO,SACPC,IAAI,uBAHJ,kCAQJ,yBAAK7B,UAAU,mBAEX,yBAAKA,UAAU,6BACX,yBAAKA,UAAU,sBAAf,qCAAyD,8BAC9CK,EAAUyB,YAAY,IAAM,IAAIC,QAAQ,GADM,IAE/C1B,EAAUyB,YAAY,IAAM,GAAK,GAAlC,YAESzB,EAAUyB,YAAY,IAAM,IAAIC,QAAQ,KAE5C1B,EAAUyB,YAAY,IAAM,IAAIC,QAAQ,KAItD,yBAAK/B,UAAU,mBAAf,oBAAoD,6BAAMK,EAAU2B,MAAMD,QAAQ,GAA9B,YAEpD,yBAAK/B,UAAU,iBAAf,yCAAuE,6BAAMK,EAAU4B,MAEvF,yBAAKjC,UAAU,mBAAf,aAA6C,6BAAyB,IAAnBK,EAAU6B,KAAa,WAAa,aAEvF,yBAAKlC,UAAU,sBAAf,uFAAuF,6BAAMK,EAAU8B,SAASJ,QAAQ,MAG5H,yBAAK/B,UAAU,oBAAf,gEAAkF,6BAAK,yBAAKoC,MAAO,CAACZ,MAAM,GAAD,QAAuB,IAAjBnB,EAAUgC,QAAYN,QAAQ,GAApC,QAAkD,sCAAyB,IAAjB1B,EAAUgC,QAAYN,QAAQ,GAAtC,QAE3J,yBAAK/B,UAAU,0BAAf,+CAAuE,6BAAK,yBAAKoC,MAAO,CAACZ,MAAM,GAAD,QAA6B,IAAvBnB,EAAUiC,cAAkBP,QAAQ,GAA1C,QAAwD,sCAA+B,IAAvB1B,EAAUiC,cAAkBP,QAAQ,GAA5C,QAEtJ,yBAAK/B,UAAU,qBAAf,iDAAoE,6BAAK,yBAAKoC,MAAO,CAACZ,MAAM,GAAD,QAAwB,IAAlBnB,EAAUkC,SAAaR,QAAQ,GAArC,QAAmD,sCAA0B,IAAlB1B,EAAUkC,SAAaR,QAAQ,GAAvC,QAE9I,yBAAK/B,UAAU,8BAAf,2DAA4F,6BAAK,yBAAKoC,MAAO,CAACZ,MAAM,GAAD,QAAiC,IAA3BnB,EAAUmC,kBAAsBT,QAAQ,GAA9C,SAA6D,sCAAmC,IAA3B1B,EAAUmC,kBAAsBT,QAAQ,GAAhD,QAEhL,yBAAK/B,UAAU,0BAAf,8CAA6E,6BAAK,yBAAKoC,MAAO,CAACZ,MAAM,GAAD,QAA6B,IAAvBnB,EAAUoC,cAAkBV,QAAQ,GAA1C,QAAwD,sCAA+B,IAAvB1B,EAAUoC,cAAkBV,QAAQ,GAA5C,YAO5K,Q,qGC7GD,SAASW,EAAT,GAAmD,IAAnCC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,MAAOnD,EAAY,EAAZA,MAAOC,EAAK,EAALA,GAExD,OACI,yBAAKK,UAAU,8BAA8BkB,QAAS,kBAAKxB,EAAMC,KAC7D,yBAAKwB,IAAK0B,EAAOvB,IAAI,QAAQC,OAAO,MAAMC,MAAM,MAAMxB,UAAU,oBAChE,wBAAIA,UAAU,mBAAmB2C,GAFrC,OAII,wBAAI3C,UAAU,oBAAoB4C,ICN/B,SAASE,EAAT,GAAwC,IAApBpD,EAAmB,EAAnBA,MAAOD,EAAY,EAAZA,UAAY,EAElBW,mBAAS,IAFS,mBAE3C2C,EAF2C,KAEjCC,EAFiC,OAGpB5C,qBAHoB,mBAG3C6C,EAH2C,KAGlCC,EAHkC,OAIhB9C,mBAAS,IAJO,mBAI3C+C,EAJ2C,KAIhCC,EAJgC,OAKZhD,mBAAS,wCALG,mBAK3CiD,EAL2C,KAK9BC,EAL8B,KAO5CC,EAAY,WAEhB3C,MAAK,8CAAyCmC,EAAzC,gCAAyEI,GAAY,CACxF1E,QAAS,CACP,cAAiB,UAAYgB,KAGhCoB,MAAK,SAAA1B,GACJ,GAAuB,MAApBA,EAASqE,OACV,OAAOrE,EAASH,UAGnB6B,MAAK,SAAAC,QACQ2C,IAAT3C,GACDoC,EAAWpC,GACXwC,EAAe,yCAEfA,EAAe,sCAGlBI,OAAM,SAACC,GACNC,QAAQC,IAAIF,OAIhBhD,qBAAU,WACLsC,GACDM,MAED,CAACJ,IAEJ,IAQMW,EAAmB,SAAC9C,GACL,oCAAhBqC,GACDC,EAAe,qBAEjBtC,EAAEC,iBACFmC,EAAaD,EAAU,KAGzB,OACA,oCACE,0BAAMnD,UAAU,aACZ,2BAAO+D,KAAK,OAAOC,SAAU,SAAAhD,GAAC,OAAIgC,EAAYhC,EAAEY,OAAOqC,QAAQjE,UAAU,kBAAkBkE,YAAY,oCACvG,2BAAOH,KAAK,SAASE,MAAM,qBAAqB/C,QApBlC,SAACF,GACnBA,EAAEC,iBACFmC,EAAa,MACbA,EAAa,IACbE,EAAe,wCACfC,KAe0EvD,UAAU,2BAGvEyD,IAAZR,EAGoC,IAAhCA,EAAQkB,OAAOC,MAAMC,OAEpB,oCACE,wBAAIrE,UAAU,qBAAd,8CACA,yBAAKA,UAAU,kBAEX,wBAAIA,UAAU,cACXiD,EAAQkB,OAAOC,MAAME,KAAI,SAAAC,GAAI,OAC5B,kBAAC7B,EAAD,CAAaC,MAAO4B,EAAK9C,KACnBmB,OAAQ2B,EAAK7C,QAAQ,GAAGD,KACxBoB,MAAO0B,EAAKnD,MAAMC,OAAO,GAAG7C,IAC5BkB,MAASA,EACTC,GAAM4E,EAAK5E,GACXsC,IAAKsC,EAAK5E,UAMP,yCAAhB0D,GAA6D,wBAAhBA,EAE5C,4BAAQnC,QAAS4C,EAAkB9D,UAAU,yBAAyBqD,GAEtE,4BAAQnC,QAAS4C,EAAkB9D,UAAU,qBAAqBqD,IAItE,oCACE,wBAAIrD,UAAU,mBAAd,sEACA,wBAAIA,UAAU,mBAAd,cAMN,oCACE,wBAAIA,UAAU,mBAAd,eAA8C,0BAAMA,UAAU,yBAAhB,cAA9C,KACA,wBAAIA,UAAU,mBAAd,+EACA,wBAAIA,UAAU,mBAAd,qF,4UC9FUwE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC7G,EAAA,EAAD,OAEF8G,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvE,MAAK,SAAAwE,GACJA,EAAaC,gBAEd5B,OAAM,SAAAxE,GACL0E,QAAQ1E,MAAMA,EAAMqG,c","file":"static/js/main.ee596437.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../scss/main.scss\";\nimport Searchbar from \"./Searchbar\";\nimport TrackInfo from \"./TrackInfo\";\n\nexport default class App extends React.Component {\n\n  constructor(props){\n    super(props) \n\n    this.state = {\n      authToken: null,\n      currId: null\n    }\n\n    this.client_id = \"fb185e2943374c65b6cdc939c506b3c1\"; \n    this.client_secret = \"7211f605e1274061ad0808b8f2da4fed\";\n  }\n\n  componentDidMount(){\n    this.reciveAuthToken();\n  }\n\n  reciveAuthToken = ()=> {\n    const request = require(\"request\");\n\n    const authOptions = {\n      url: \"https://accounts.spotify.com/api/token\",\n      headers: {\n        \"Authorization\": \"Basic \" + (new Buffer(this.client_id + \":\" + this.client_secret).toString(\"base64\"))\n      },\n      form: {\n        grant_type: \"client_credentials\"\n      },\n      json: true\n    };\n\n    request.post(authOptions, (error, response, body)=> {\n              \n      if (!error && response.statusCode === 200) {\n        const token = body.access_token;\n        this.setState({authToken: token});\n      }\n    })\n  }\n  \n  getId = (id)=> {\n    this.setState({currId: id});\n  }\n\n  removeId = ()=> {\n    this.setState({currId: null});\n  }\n\n  render() {\n    return(\n      <div className=\"App\">\n        <div className=\"trackinfo\">\n          <TrackInfo\n            client_id = {this.client_id}\n            client_secret = {this.client_secret}\n            currId = {this.state.currId}\n            authToken = {this.state.authToken}\n            removeId = {this.removeId}\n          />\n        </div>\n        <Searchbar\n          client_id = {this.client_id}\n          client_secret = {this.client_secret}\n          getId = {this.getId}\n          authToken = {this.state.authToken}\n        />\n      </div>\n    )\n  }\n}","import React, {useState, useEffect} from \"react\";\r\nimport \"../scss/main.scss\";\r\n\r\nexport default function TrackInfo({currId, removeId, authToken}){\r\n\r\n    const [trackInfo, setTrackInfo] = useState(false);\r\n    const [trackThumb, setTrackThumb] = useState(false);\r\n    const [isClosed, setIsClosed] = useState(true);\r\n\r\n    useEffect(()=> {\r\n        if(currId !== null){\r\n            fetch (`https://api.spotify.com/v1/audio-features/${currId}`,{\r\n                headers:{\r\n                    \"Authorization\": \"Bearer \" + authToken\r\n                }\r\n            })\r\n            .then(response => {\r\n                return response.json()\r\n            })\r\n            .then(data => {\r\n                setTrackInfo(data);\r\n            })  \r\n            .then(setIsClosed(false))\r\n        } \r\n    }, [currId, authToken])  \r\n\r\n    useEffect(()=> {\r\n        if(currId !== null){\r\n            fetch (`https://api.spotify.com/v1/tracks/${currId}`,{\r\n                headers: {\r\n                    \"Authorization\": \"Bearer \" + authToken\r\n                }\r\n            })\r\n            .then(response => {\r\n                return response.json()\r\n            })\r\n            .then(data =>  {\r\n                setTrackThumb(data);\r\n            })  \r\n        } \r\n    }, [currId, authToken]) \r\n\r\n    const handleClose = (e)=> {\r\n        e.preventDefault();\r\n        if (trackInfo){\r\n            setIsClosed(true)\r\n            setTrackInfo(false)\r\n            setTrackThumb(false);\r\n            removeId();\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <> \r\n            {trackInfo !== false && isClosed === false && trackThumb !== false\r\n            ?\r\n                <>\r\n                    <div className=\"trackinfo_background\" onClick={handleClose}>\r\n                    </div>\r\n                    <div className=\"trackinfo_container\">\r\n                        <button className=\"trackinfo_close-btn\" onClick={handleClose}>Zamknij</button>\r\n                        <div className=\"trackinfo_data-container\">\r\n\r\n                            <div className=\"trackinfo_thumbnail\">\r\n                                <img src={trackThumb.album.images[0].url} alt=\"cover\" height=\"360\" width=\"360\" className=\"trackinfo_thumbnail-img\"/>\r\n                                <div className=\"trackinfo_thumbnail-title\">{trackThumb.name}</div>\r\n                                <div className=\"trackinfo_thumbnail-artist\">{trackThumb.artists[0].name}</div>\r\n                                <a className=\"trackinfo_link\"\r\n                                href={`https://open.spotify.com/track/${trackInfo.id}`} \r\n                                target=\"_blank\"\r\n                                rel=\"noopener noreferrer\">\r\n                                Odtwórz utwór w Spotify\r\n                                </a>\r\n                            </div>\r\n                            \r\n                            <div className=\"trackinfo_specs\">\r\n\r\n                                <div className=\"trackinfo_specs-container\">\r\n                                    <div className=\"trackinfo_duration\">Długość utworu:&nbsp;<div>   \r\n                                            {((trackInfo.duration_ms/1000)/60).toFixed(0)}:\r\n                                            {(trackInfo.duration_ms/1000)%60 < 10 \r\n                                                ? \r\n                                                `0${((trackInfo.duration_ms/1000)%60).toFixed(0)}`\r\n                                                :\r\n                                                ((trackInfo.duration_ms/1000)%60).toFixed(0)\r\n                                            }</div>\r\n                                    </div>\r\n\r\n                                    <div className=\"trackinfo_tempo\">Tempo utworu:&nbsp;<div>{trackInfo.tempo.toFixed(0)}&nbsp;BPM</div></div>\r\n\r\n                                    <div className=\"trackinfo_key\">Tonacja (0: C, 1: C#, 2: D, itd.):&nbsp;<div>{trackInfo.key}</div></div>\r\n\r\n                                    <div className=\"trackinfo_scale\">Skala:&nbsp;<div>{trackInfo.mode === 0 ? \"Minorowa\" : \"Majorowa\"}</div></div>\r\n\r\n                                    <div className=\"trackinfo_loudness\">Średnia wartość głośności wyrażona w LUFS(?):&nbsp;<div>{trackInfo.loudness.toFixed(1)}</div></div>    \r\n                                </div>\r\n\r\n                                <div className=\"trackinfo_energy\">Szansa, że nie zaśniesz podczas słuchania:&nbsp;<div><div style={{width: `${(trackInfo.energy*100).toFixed(0)}%`}}></div><p>{`${(trackInfo.energy*100).toFixed(0)}%`}</p></div></div>\r\n\r\n                                <div className=\"trackinfo_danceability\">Da się do tego tańczyć ?:&nbsp;<div><div style={{width: `${(trackInfo.danceability*100).toFixed(0)}%`}}></div><p>{`${(trackInfo.danceability*100).toFixed(0)}%`}</p></div></div>\r\n\r\n                                <div className=\"trackinfo_valence\">Ilość pozytywności/euforii:&nbsp;<div><div style={{width: `${(trackInfo.valence*100).toFixed(0)}%`}}></div><p>{`${(trackInfo.valence*100).toFixed(0)}%`}</p></div></div>\r\n\r\n                                <div className=\"trackinfo_instrumentalness\">Procent sekcji wyłącznie instrumentalnych:&nbsp;<div><div style={{width: `${(trackInfo.instrumentalness*100).toFixed(0)}% `}}></div><p>{`${(trackInfo.instrumentalness*100).toFixed(0)}%`}</p></div></div>\r\n\r\n                                <div className=\"trackinfo_acousticness\">Szansa, że to utwór akustyczny:&nbsp;<div><div style={{width: `${(trackInfo.acousticness*100).toFixed(0)}%`}}></div><p>{`${(trackInfo.acousticness*100).toFixed(0)}%`}</p></div></div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            :\r\n                null\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport \"../scss/main.scss\";\r\n\r\nexport default function Track({title, artist, cover, getId, id}) {\r\n\r\n    return (\r\n        <div className=\"list_item list_item-animate\" onClick={()=> getId(id)}>\r\n            <img src={cover} alt=\"cover\" height=\"200\" width=\"200\" className=\"list_item-cover\"/>\r\n            <h1 className=\"list_item-title\">{title}</h1>\r\n            &nbsp;\r\n            <h4 className=\"list_item-artist\">{artist}</h4>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useState, useEffect} from \"react\";\r\nimport TrackSquare from \"./TrackSquare\";\r\nimport \"../scss/main.scss\";\r\n\r\nexport default function Searchbar({getId, authToken}) {\r\n\r\n    const [songName, setSongName] = useState(\"\");\r\n    const [results, setResults] = useState();\r\n    const [resAmount, setResAmount] = useState(10);\r\n    const [moreResults, setMoreResults] = useState(\"Pokaż więcej wyników...\");\r\n\r\n    const fetchData = ()=> {\r\n  \r\n      fetch (`https://api.spotify.com/v1/search?q=${songName}%20&type=track&limit=${resAmount}`,{\r\n        headers: {\r\n          \"Authorization\": \"Bearer \" + authToken\r\n        }\r\n      })\r\n      .then(response => {\r\n        if(response.status !== 400){\r\n          return response.json()\r\n        } \r\n      })\r\n      .then(data => {\r\n        if(data !== undefined){\r\n          setResults(data) \r\n          setMoreResults(\"Pokaż więcej wyników...\")\r\n        } else {\r\n          setMoreResults(\"To już wszystkie wyniki :(\")\r\n        }\r\n      })\r\n      .catch((err)=> {\r\n        console.log(err);\r\n      })\r\n    }\r\n\r\n    useEffect(()=> {  \r\n      if(results){\r\n        fetchData();  //fetch after pressing \"more results\"\r\n      }\r\n    }, [resAmount]) \r\n    \r\n    const handleClick = (e)=> {\r\n      e.preventDefault();\r\n      setResAmount(null);\r\n      setResAmount(10);\r\n      setMoreResults(\"Pokaż więcej wyników...\");\r\n      fetchData();\r\n    }\r\n\r\n    const handleLoadButton = (e)=> {\r\n      if(moreResults !== \"To już wszystkie wyniki :(\"){\r\n        setMoreResults(\"Ładowanie...\");\r\n      }\r\n      e.preventDefault();\r\n      setResAmount(resAmount+10);\r\n    }\r\n\r\n    return (\r\n    <>\r\n      <form className=\"searchbar\">\r\n          <input type=\"text\" onChange={e => setSongName(e.target.value)} className=\"searchbar_input\" placeholder=\"Wpisz nazwę utworu/artysty\"></input>\r\n          <input type=\"submit\" value=\"Przeszukaj Spotify\" onClick={handleClick} className=\"searchbar_submit\"></input>\r\n      </form>\r\n\r\n      {results !== undefined \r\n        ? \r\n\r\n          (results.tracks.items.length !== 0 \r\n            ?\r\n            <>\r\n              <h2 className=\"searchbar_results\">Oto wyniki wyszukiwania. Czas na wybór:</h2>\r\n              <div className=\"list_container\">\r\n\r\n                  <ul className=\"track_list\">\r\n                    {results.tracks.items.map(item => (\r\n                      <TrackSquare title={item.name} \r\n                            artist={item.artists[0].name} \r\n                            cover={item.album.images[0].url}\r\n                            getId = {getId}\r\n                            id = {item.id}\r\n                            key={item.id}\r\n                      />\r\n                    ))}    \r\n                  </ul> \r\n\r\n              </div>\r\n              {moreResults !== \"Pokaż więcej wyników...\" && moreResults !== \"Ładuję...\"\r\n                ?\r\n                <button onClick={handleLoadButton} className=\"track_list-button end\">{moreResults}</button>\r\n                :\r\n                <button onClick={handleLoadButton} className=\"track_list-button\">{moreResults}</button>\r\n              }\r\n            </>\r\n            :\r\n            <>\r\n              <h1 className=\"searchbar_error\">Niestety - Spotify nie posiada takiego utworu w swojej bibliotece.</h1>\r\n              <h1 className=\"searchbar_error\">Do czasu.</h1>\r\n            </>\r\n          ) \r\n\r\n        :\r\n        \r\n        <>\r\n          <h2 className=\"searchbar_start\">Witaj na&nbsp;<span className=\"searchbar_start-title\">WaveMarket</span>!</h2>\r\n          <h2 className=\"searchbar_start\">Poznaj ciekawe informacje na temat swoich ulubionych utworów na Spotify.</h2>\r\n          <h2 className=\"searchbar_start\">Wyszukaj utwór do zbadania a potem kliknij w jeden z wyników (MAX. 50).</h2>\r\n        </>\r\n      }\r\n    </>)\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport \"./scss/main.scss\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister()"],"sourceRoot":""}